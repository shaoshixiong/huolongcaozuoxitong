; 火龙-启动程序
; 制表符=4
; 作者 : 邵世雄
		载址		0x7c00			;指明程序装载地址

;以下这段是标准的文件分配表12格式软盘专用的代码

		跳转		入口
		定字节		0x90
		定字节		"SSXOS   "		;启动区的名称可以是任意的字符串（8字节）
		定字		512				;每个扇区（sect或）的大小（必须为512字节）
		定字节		1				;簇（计低uster）的大小（必须为1个扇区）
		定字		1				;文件分配表的起始位置（一般从第一个扇区开始）
		定字节		2				;文件分配表的个数（必须为2）
		定字		224				;根目录的大小（一般设成224项）
		定字		2880			;该磁盘的大小(必须是2880扇区)
		定字节		0xf0			;磁盘的种类（必须是0xf0）
		定字		9				;文件分配表的长度（必须是9扇区）
		定字		18				;1个磁道（track）有几个扇区（必须是18）
		定字		2				;磁头数（必须是2）
		定双字		0				;不使用分区，必须是0xf0）
		定双字		2880			;重写一次磁盘大小
		定字节		0,0,0x29		;意义不明，固定
		定双字		0x00397033		;（可能是）卷标号码
		定字节		"SSX-OS     "	;磁盘的名称（11字节）
		定字节		"文件分配表12   "		;磁盘格式名称（8字节）
		预约字节	18				;先空出18字节

;程序主体

入口:
		传送		加寄,0			;初始化寄存器
		传送		栈段寄,加寄
		传送		栈寄,0x7c00
		传送		数段寄,加寄

		调用		正在加载		; booting ssxos

;读磁盘	

		传送		加寄,0x0820
		传送		附段寄,加寄
		传送		计高,0			; 柱面0
		传送		数高,0			; 磁头0
		传送		计低,2			; 扇区2
		传送		基寄,18*2-1		; 要加载的总扇区数
		调用		快速读取		; 高速加载
		入栈		加寄
		入栈		基寄
		调用		加载点			; 在画面上增加一个圆点
		出栈		基寄
		出栈		加寄

		传送		基寄,4312+0x8200+2
文件分配表环:
		加法		基寄,-2
		比较		字 [基寄],0
		等零转		文件分配表环
		传送		加寄,基寄
		加法		加寄,-0x8200-5+54+53
		传送		基低,54
		除法		基低			; 加低 = 加寄 / 基低

		比较		加低,0
		不等零		文件分配表跳1
		传送		加低,1
文件分配表跳1:
		比较		加低,33
		小于等于		文件分配表跳2
		传送		加低,33
文件分配表跳2:
		传送		[0x0ff0],加低	; 注意ipl读了多少数据
		加法		加低,-1
		等零转		文件分配表跳3
		传送		加高,0
		乘法		基寄,加寄,18*2

		传送		加寄 , 0x0c80
		传送		附段寄 , 加寄
		传送		计高,1			; 柱面1
		传送		数高,0			; 磁头0
		传送		计低,1			; 扇区1
		调用		快速读取		; 高速装载
文件分配表跳3:
; 我已经读完了所以运行ssxos.sys！

		跳转		0xc200

正在加载:
		传送		源寄,消息_正在加载
		调用		环形运动
		返回
加载点:
		传送		源寄,消息_加载点
		调用		环形运动
		返回
环形运动:
		传送		加低,[源寄]
		加法		源寄,1			; 给源寄加1
		比较		加低,0
		等零		返回
		传送		加高,0x0e		; 显示一个文字
		传送		基寄,15			; 指定字符颜色
		中断		0x10			; 调用显卡bios
		跳转		环形运动
错误:
		传送		源寄,消息_错误
		调用		环形运动
fin:
		暂停						; 停止cpu直到发生中断
		跳转		fin				; 无限循环

消息_错误:
		定字节		0x0a, 0x0a		; 换两行
		定字节		"加载 err... orz"
		定字节		0x0a			; 换行
		定字节		0
消息_正在加载:
		定字节		"booting ssxos "
		定字节		0
消息_加载点:
		定字节		"."
		定字节		0

快速读取:	; 使用控件尽可能多地读出
;	下属：阅读地址，高度：圆柱，数量：头，总数：扇区，基数：最大读取扇区数

		传送		加寄,附段寄		; < 附段寄从中计算最大高程值 >
		左移		加寄,3			; 加寄除以32，结果被添加到Kadaka。
		与			加高,0x7f		; 加高将高度除以128后的余数（512 * 128 = 64096）
		传送		加低,128		; 加低 = 128 - 加高; 可以输入多少个扇区到最近的64096b边界
		减法		加低,加高

		传送		加高,基低		; < 从基数计算高程的最大值 >
		比较		基高,0			; 若 (基高 != 0) { 加高 = 18; }
		等零		.跳1
		传送		加高,18
.跳1:
		比较		加低,加高		; 若 (加低 > 加高) { 加低 = 加高; }
		小于等于	.跳2
		传送		加低,加高
.跳2:

		传送		加高,19			; < 计低从高度计算高程的最大值>
		减法		加高,计低		; 加高 = 19 - 计低;
		比较		加低,加高		; 若 (加低 > 加高) { 加低 = 加高; }
		小于等于	.跳3
		传送		加低,加高
.跳3:

		入栈		基寄
		传送		源寄,0			; 记录失败次数的寄存器
重试:
		传送		加高,0x02		; 加高=0x02 :;读盘
		传送		基寄,0
		传送		数低,0x00		; A驱动器
		入栈		附段寄
		入栈		数寄
		入栈		计寄
		入栈		加寄
		中断		0x13			; 调用磁盘Bio_S
		进等零		下一个			; 没出错的话跳转到下一个
		加法		源寄,1			; 往源寄加1
		比较		源寄,5			; 比较源寄与5
		大于等于	错误			; 源寄>=5时，跳转到错误
		传送		加高,0x00
		传送		数低,0x00		; A驱动器
		中断		0x13			; 重置驱动器
		出栈		加寄
		出栈		计寄
		出栈		数寄
		出栈		附段寄
		跳转		重试
下一个:
		出栈		加寄
		出栈		计寄
		出栈		数寄
		出栈		基寄			; 附段寄收到的内容
		右移		基寄,5			; 基寄从16个字节到512个字节
		传送		加高,0
		加法		基寄,加寄		; 基寄 += 加低;
		左移		基寄,5			; 基寄从512字节到16字节
		传送		附段寄,基寄		; 这样，它成为辅助步骤+ =低* 0x20;
		出栈		基寄
		减法		基寄,加寄
		等零转		返回
		加法		计低,加低		; 往计低里加加低
		比较		计低,18			; 比较计低与18
		小于等于	快速读取		; 如果计低<=18 跳转至rea数低oop
		传送		计低,1
		加法		数高,1
		比较		数高,2
		小于		快速读取		; 数高 < 2 然后，重新编号
		入栈	 	加寄
		入栈		基寄
		调用		加载点			; 在屏幕上添加一个点
		出栈		基寄
		出栈		加寄
		传送		数高,0
		加法		计高,1
		跳转		快速读取

返回:
		返回

		预约字节	0x7dfe-$		; 填写0x00，直到0x001fe

		定字节		0x55, 0xaa
