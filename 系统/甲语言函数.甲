; naskfunc
; tab=4

[格式 "WCOFF"]					; 制作目标文件的模式
[命令模式 "i486p"]				; 使用486命令的记述
[位 32]							; 制作32位模式用的机器语言
[文件名 "naskfunc.asm"]			; 源文件名信息

		全局	_出入流_hlt, _出入流_cli, _出入流_sti, _出入流_stihlt
		全局	_出入流_in8,  _出入流_in16,  _出入流_in32
		全局	_出入流_out8, _出入流_out16, _出入流_out32
		全局	_出入流_加载_e标记s, _出入流_store_e标记s
		全局	_加载_gdtr, _加载_idtr
		全局	_加载_cr0, _store_cr0
		全局	_加载_tr
		全局	_甲语言_inthandler20, _甲语言_inthandler21, _甲语言_inthandler27
		全局	_甲语言_inthandler2c, _甲语言_inthandler0c, _甲语言_inthandler0d
		全局	_memtest_sub
		全局	_farjmp, _farcall
		全局	_甲语言_火龙_api, _甲语言_结束_应用, _start_应用
		外部	_inthandler20, _inthandler21, _inthandler27
		外部	_inthandler2c, _inthandler0c, _inthandler0d
		外部	_火龙_api
		全局	__alloca

[域 .text] 	; 目标文件中写了这些之后再写程序

_出入流_hlt:			; void 出入流_hlt(void);
		暂停
		返回

_出入流_cli:			; void 出入流_cli(void);
		禁中断
		返回

_出入流_sti:			; void 出入流_sti(void);
		许中断
		返回

_出入流_stihlt:			; void 出入流_stihlt(void);
		许中断
		暂停
		返回

_出入流_in8:			; int 出入流_in8(int port);
		传送		扩数寄,[扩栈寄+4]		; port
		传送		扩加寄,0
		输入		加低,数寄
		返回

_出入流_in16:			; int 出入流_in16(int port);
		传送		扩数寄,[扩栈寄+4]		; port
		传送		扩加寄,0
		输入		加寄,数寄
		返回

_出入流_in32:			; int 出入流_in32(int port);
		传送		扩数寄,[扩栈寄+4]		; port
		输入		扩加寄,数寄
		返回

_出入流_out8:			; void 出入流_out8(int port, int data);
		传送		扩数寄,[扩栈寄+4]		; port
		传送		加低,[扩栈寄+8]			; data
		输出		数寄,加低
		返回

_出入流_out16:			; void 出入流_out16(int port, int data);
		传送		扩数寄,[扩栈寄+4]		; port
		传送		扩加寄,[扩栈寄+8]		; data
		输出		数寄,加寄
		返回

_出入流_out32:			; void 出入流_out32(int port, int data);
		传送		扩数寄,[扩栈寄+4]		; port
		传送		扩加寄,[扩栈寄+8]		; data
		输出		数寄,扩加寄
		返回

_出入流_加载_e标记s:	; int 出入流_加载_e标记s(void);
		pushfd		; 入栈 e标记s 
		出栈		扩加寄
		返回

_出入流_store_e标记s:	; void 出入流_store_e标记s(int e标记s);
		传送		扩加寄,[扩栈寄+4]
		入栈		扩加寄
		popfd		; 出栈 e标记s  
		返回

_加载_gdtr:			; void 加载_gdtr(int limit, int 添加r);
		传送		加寄,[扩栈寄+4]		; limit
		传送		[扩栈寄+6],加寄
		lgdt		[扩栈寄+6]
		返回

_加载_idtr:			; void 加载_idtr(int limit, int 添加r);
		传送		加寄,[扩栈寄+4]		; limit
		传送		[扩栈寄+6],加寄
		lidt		[扩栈寄+6]
		返回

_加载_cr0:			; int 加载_cr0(void);
		传送		扩加寄,控寄0
		返回

_store_cr0:			; void store_cr0(int 控寄0);
		传送		扩加寄,[扩栈寄+4]
		传送		控寄0,扩加寄
		返回

_加载_tr:			; void 加载_tr(int tr);
		ltr			[扩栈寄+4]		; tr
		返回

_甲语言_inthandler20:
		入栈		附段寄
		入栈		数段寄
		pushad
		传送		扩加寄,扩栈寄
		入栈		扩加寄
		传送		加寄,栈段寄
		传送		数段寄,加寄
		传送		附段寄,加寄
		调用		_inthandler20
		出栈		扩加寄
		popad
		出栈		数段寄
		出栈		附段寄
		iretd

_甲语言_inthandler21:
		入栈		附段寄
		入栈		数段寄
		pushad
		传送		扩加寄,扩栈寄
		入栈		扩加寄
		传送		加寄,栈段寄
		传送		数段寄,加寄
		传送		附段寄,加寄
		调用		_inthandler21
		出栈		扩加寄
		popad
		出栈		数段寄
		出栈		附段寄
		iretd

_甲语言_inthandler27:   ; （这几乎与_甲语言_输入thorler20等相同。）
        入栈    	附段寄
        入栈    	数段寄
        pushad
        传送     	扩加寄,扩栈寄
        入栈    	扩加寄
        传送     	加寄,栈段寄
        传送     	数段寄,加寄
        传送     	附段寄,加寄
        调用    	_inthandler27
        出栈     	扩加寄
        popad
        出栈     	数段寄
        出栈     	附段寄
        iretd

_甲语言_inthandler2c:
		入栈		附段寄
		入栈		数段寄
		pushad
		传送		扩加寄,扩栈寄
		入栈		扩加寄
		传送		加寄,栈段寄
		传送		数段寄,加寄
		传送		附段寄,加寄
		调用		_inthandler2c
		出栈		扩加寄
		popad
		出栈		数段寄
		出栈		附段寄
		iretd

_甲语言_inthandler0c:
		许中断
		入栈		附段寄
		入栈		数段寄
		pushad
		传送		扩加寄,扩栈寄
		入栈		扩加寄
		传送		加寄,栈段寄
		传送		数段寄,加寄
		传送		附段寄,加寄
		调用		_inthandler0c
		比较		扩加寄,0
		不等转		_甲语言_结束_应用
		出栈		扩加寄
		popad
		出栈		数段寄
		出栈		附段寄
		加法		扩栈寄,4			;int 0x0c 中也需要这句
		iretd

_甲语言_inthandler0d:
		许中断
		入栈		附段寄
		入栈		数段寄
		pushad
		传送		扩加寄,扩栈寄
		入栈		扩加寄
		传送		加寄,栈段寄
		传送		数段寄,加寄
		传送		附段寄,加寄
		调用		_inthandler0d
		比较		扩加寄,0
		不等转		_甲语言_结束_应用
		出栈		扩加寄
		popad
		出栈		数段寄
		出栈		附段寄
		加法		扩栈寄,4			; 在 int 0x0d 中需要这句
		iretd

_memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
		入栈		扩终寄
		入栈		扩源寄
		入栈		扩基寄
		传送		扩源寄,0xaa55aa55			; pat0
		传送		扩终寄,0x55aa55aa			; pat1
		传送		扩加寄,[扩栈寄+12+4]			; i = start;
mts_loop:
		传送		扩基寄,扩加寄
		加法		扩基寄,0xffc				; p = i + 0xffc;
		传送		扩数寄,[扩基寄]				; 旧的 = *p;
		传送		[扩基寄],扩源寄				; *p = pat0;
		异或		双字 [扩基寄],0xffffffff	; *p ^= 0xffffffff;
		比较		扩终寄,[扩基寄]				; if (pat1 != *p)
		不等转		mts_fin					;	goto fin;
		异或		双字 [扩基寄],0xffffffff	; *p ^= 0xffffffff;
		比较		扩源寄,[扩基寄]				; if (pat0 != *p)
		不等转		mts_fin					;	goto fin;
		传送		[扩基寄],扩数寄				; *p = 旧的;
		加法		扩加寄,0x1000				; i += 0x1000;
		比较		扩加寄,[扩栈寄+12+8]			; if (i <= end)
		小于等于	mts_loop				;	goto mts_loop
		出栈		扩基寄
		出栈		扩源寄
		出栈		扩终寄
		返回
mts_fin:
		传送		[扩基寄],扩数寄				; *p = 旧的;
		出栈		扩基寄
		出栈		扩源寄
		出栈		扩终寄
		返回

_farjmp:			; void farjmp(int eip, int cs);
		跳转		远距[扩栈寄+4]		; eip, cs
		返回

_farcall:			; void farcall(int eip, int cs);
		调用		远距[扩栈寄+4]		; eip, cs
		返回

_甲语言_火龙_api:
		许中断	
		入栈		数段寄
		入栈		附段寄
		pushad				; 用于保存寄存器值的PUSH
		pushad					; 用于向火龙_api传值的PUSH
		传送		加寄,栈段寄
		传送		数段寄,加寄		; 将操作系统用段地址存入DB和ES
		传送		附段寄,加寄
		调用		_火龙_api
		比较		扩加寄,0			; 当EAX不为0时程序结束
		不等转		_甲语言_结束_应用
		加法		扩栈寄,32
		popad
		出栈		附段寄
		出栈		数段寄
		iretd
_甲语言_结束_应用:
;	eaxはtss.esp0の番地
		传送		扩栈寄,[扩加寄]
		传送		双字[扩加寄+4],0
		popad
		返回						; 返回命令_应用

_start_应用:			; void start_应用(int eip, int cs, int 扩栈寄, int 数段寄, int *tss_esp0);
		pushad					; 将32位寄存器的值全部保存下来
		传送		扩加寄,[扩栈寄+36]	; 应用程序用EIP
		传送		扩计寄,[扩栈寄+40]	; 应用程序用CS
		传送		扩数寄,[扩栈寄+44]	; 应用程序用ESP
		传送		扩基寄,[扩栈寄+48]; 应用程序用DS/SS
		传送		扩址寄,[扩栈寄+52]	; tss.esp0的地址
		传送		[扩址寄  ],扩栈寄		; 保存操作系统用ESP
		传送		[扩址寄+4],栈段寄		; 保存操作系统用SS
		传送		附段寄,基寄
		传送		数段寄,基寄
		传送		标段寄,基寄
		传送		全段寄,基寄
; 下面调整栈，以免用RETF跳转到应用程序
		或			扩计寄,3			;  将应用程序用段号和3进行OR运算
		或			扩基寄,3			; 将应用程序用段号和3进行OR运算
		入栈		扩基寄				; 应用程序的SS
		入栈		扩数寄			; 应用程序的ESP
		入栈		扩计寄				; 应用程序的CS
		入栈		扩加寄				; 应用程序的EIP
		返回码段

__alloca:
		加法		扩加寄,-4
		减法		扩栈寄,扩加寄
		跳转		双字 [扩栈寄+扩加寄]		; 返回替代
