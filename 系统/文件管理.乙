/* FAT文件系统相关的 */
/* 作者 : 邵世雄 */
#引入 "主程序.头"

空 文件_读取文件分配表(整型 *文件分配表, 无符号 字符 *img)
{/* 将磁盘映像中的FAT解压缩 */
	整型 i, j = 0;
	循环 (i = 0; i < 2880; i += 2) 
	{
		文件分配表[i + 0] = (img[j + 0]      | img[j + 1] << 8) & 0xfff;
		文件分配表[i + 1] = (img[j + 1] >> 4 | img[j + 2] << 4) & 0xfff;
		j += 3;
	}
	返回;
}

空 文件_加载文件(整型 clustno, 整型 大小, 字符 *buf, 整型 *文件分配表, 字符 *img)
{
	整型 i;
	循环 (;;) 
	{
		若 (大小 <= 512) 
		{
			循环 (i = 0; i < 大小; i++)
				buf[i] = img[clustno * 512 + i];
			终止;
		}
		循环 (i = 0; i < 512; i++)
			buf[i] = img[clustno * 512 + i];
		大小 -= 512;
		buf  += 512;
		clustno = 文件分配表[clustno];
	}
	返回;
}

结构 文件信息 *文件_搜索(字符 *名称, 结构 文件信息 *文信, 整型 max)
{
	整型 i, j;
	字符 s[12];
	/* 文件名替换 */
	循环 (j = 0; j < 11; j++)
		s[j] = ' ';
	j = 0;
	循环 (i = 0; 名称[i] != 0; i++) 
	{
		若 (j >= 11) 
		{
			返回 0; /* 找不到 */
		}
		若 (名称[i] == '.' && j <= 8) 
		{
			j = 8;
		} 
		则 
		{
			s[j] = 名称[i];
			若 ('a' <= s[j] && s[j] <= 'z')
				s[j] -= 0x20;
			j++;
		}
	}
	循环 (i = 0; i < max; ) 
	{
		/* 文件搜索 */
		若 (文信[i].名称[0] == 0x00)
			终止;
		若 ((文信[i].类型 & 0x18) == 0) 
		{
			循环 (j = 0; j < 11; j++) 
			{
				若 (文信[i].名称[j] != s[j])
					转到 下一个;
			}
			返回 文信 + i; /* 找到文件 */
		} 
		则 若 ((文信[i].类型 & 0x08) == 0) 
		{
			循环 (j = 0; j < 8; j++) 
			{
				若 (文信[i].名称[j] != s[j])
					转到 下一个;
			}
			返回 文信 + i; /* 找到目录 */
		}
下一个:
		i++;
	}
	返回 0; /* 找不到 */
}

字符 *文件_加载文件2(整型 clustno, 整型 *p大小, 整型 *文件分配表)
{
	整型 大小 = *p大小, 大小2;
	结构 内存管理 *内管 = (结构 内存管理 *) 内存管理_地址;
	字符 *buf, *buf2;
	buf = (字符 *) 内管_分配_4k(内管, 大小);
	文件_加载文件(clustno, 大小, buf, 文件分配表, (字符 *) (地址_磁盘镜像 + 0x003e00));
	若 (大小 >= 17) 
	{
		大小2 = tek_获取大小(buf);
		若 (大小2 > 0) 
		{
			/* 应用压缩 */
			buf2 = (字符 *) 内管_分配_4k(内管, 大小2);
			tek_decomp(buf, buf2, 大小2);
			内管_可用_4k(内管, (整型) buf, 大小);
			buf = buf2;
			*p大小 = 大小2;
		}
	}
	返回 buf;
}
