/* ver指令(控制台.乙)  */
/* 作者：邵世雄 */
#定义 火龙操作系统_版本1	"ssxos Ver.0.1.05\n"
#定义 火龙操作系统_版本2	"Copyright(C) 2014-2019 ssxossoft.\n\n"

/* 甲语言头.甲 */
结构 启动信息 { /* 0x0ff0-0x0fff */
	字符 cyls; /* 启动区读硬盘读到何处为止 */
	字符 指示灯状态; /* 启动时键盘LED的状态 */
	字符 颜色位数; /* 显卡模式为多少位色彩 */
	字符 保留;
	短整型 屏幕横坐标, 屏幕纵坐标; /* 画面分辨率 */
	无符号 字符 *显存;
};
#定义 地址_启动信息	0x00000ff0
#定义 地址_磁盘镜像		0x00100000

/* 甲语言函数.甲 */
空 出入流_hlt(空);
空 出入流_禁中断(空);
空 出入流_许中断(空);
空 出入流_许中断hlt(空);
整型 出入流_输入8(整型 端口);
空 出入流_输出8(整型 端口, 整型 数据);
整型 出入流_加载_e旗帜(空);
空 出入流_store_e旗帜(整型 e旗帜);
空 加载_gdtr(整型 限定, 整型 添加r);
空 加载_idtr(整型 限定, 整型 添加r);
整型 加载_cr0(空);
空 store_cr0(整型 cr0);
空 加载_tr(整型 tr);
空 甲语言_处理_句柄0c(空);
空 甲语言_处理_句柄0d(空);
空 甲语言_处理_句柄20(空);
空 甲语言_处理_句柄21(空);
空 甲语言_处理_句柄27(空);
空 甲语言_处理_句柄2c(空);
无符号 整型 内存检测_sub(无符号 整型 开始, 无符号 整型 结束);
空 远距跳转(整型 eip, 整型 cs);
空 远距调用(整型 eip, 整型 cs);
空 甲语言_火龙_应用程序接口(空);
空 开始_应用(整型 eip, 整型 cs, 整型 esp, 整型 ds, 整型 *tss_esp0);
空 甲语言_结束_应用(空);

/* 先进先出.乙 */
结构 先进先出32 {
	整型 *缓存;
	整型 p, q, 大小, 空余, 旗帜;
	结构 任务 *任务;
};
空 先进先出32_初始化(结构 先进先出32 *先进先出, 整型 大小, 整型 *缓存, 结构 任务 *任务);
整型 先进先出32_放入(结构 先进先出32 *先进先出, 整型 数据);
整型 先进先出32_获取(结构 先进先出32 *先进先出);
整型 先进先出32_状态(结构 先进先出32 *先进先出);

/* 图像化.乙 */
空 初始化_调色板(空);
空 设置_调色板(整型 开始, 整型 结束, 无符号 字符 *红绿蓝);
整型 获取_bpp(空);
整型 获取_颜色(整型 bpp, 整型 col);
空 实盒(无符号 整型 *显存, 整型 横坐标大小, 整型 c, 整型 x0, 整型 y0, 整型 x1, 整型 y1);
空 初始化_屏幕(无符号 整型 *显存, 整型 x, 整型 y);
空 放字体(无符号 整型 *显存, 整型 横坐标大小, 整型 x, 整型 y, 整型 c, 字符 *字体);
空 打印字体(无符号 整型 *显存, 整型 横坐标大小, 整型 x, 整型 y, 整型 c, 无符号 字符 *s);
空 初始化_鼠标_光标(无符号 整型 *鼠标, 整型 bc);
空 放m输入若ont(无符号 整型 *显存, 整型 横坐标大小, 整型 x, 整型 y, 整型 c, 字符 *字体);
空 放入迷你字体(无符号 整型 *显存, 整型 横坐标大小, 整型 x, 整型 y, 整型 c, 无符号 字符 *s);
空 片数据(无符号 整型 *显存, 整型 横坐标大小, 整型 px, 整型 py, 无符号 字符 *数据, 整型 sx, 整型 sy, 整型 bc);

/* dsctbl.乙 */
结构 SEGMENT_DESCRIPTOR {
	短整型 限定_低, 基础_低;
	字符 基础_中, access_右;
	字符 限定_高, 基础_高;
};
结构 GATE_DESCRIPTOR {
	短整型 off设置_低, 选中or;
	字符 dw_计数, access_右;
	短整型 off设置_高;
};
空 初始化_全局表中断表(空);
空 设置_分段描述(结构 SEGMENT_DESCRIPTOR *sd, 无符号 整型 限定, 整型 基础, 整型 ar);
空 设置_入口描述(结构 GATE_DESCRIPTOR *gd, 整型 off设置, 整型 选中or, 整型 ar);
#定义 地址_IDT			0x0026f800
#定义 限定_IDT		0x000007ff
#定义 地址_GDT			0x00270000
#定义 限定_GDT		0x0000ffff
#定义 地址_程序装载地址		0x00280000
#定义 限定_程序装载地址	0x0007ffff
#定义 AR_数据32_RW	0x4092
#定义 AR_代码32_ER	0x409a
#定义 AR_LDT			0x0082
#定义 AR_TSS32		0x0089
#定义 AR_入口32	0x008e

/* 中断.乙 */
空 初始化_可编程性中断控制器(空);
#定义 可编程性中断控制器0_ICW1		0x0020
#定义 可编程性中断控制器0_OCW2		0x0020
#定义 可编程性中断控制器0_IMR		0x0021
#定义 可编程性中断控制器0_ICW2		0x0021
#定义 可编程性中断控制器0_ICW3		0x0021
#定义 可编程性中断控制器0_ICW4		0x0021
#定义 可编程性中断控制器1_ICW1		0x00a0
#定义 可编程性中断控制器1_OCW2		0x00a0
#定义 可编程性中断控制器1_IMR		0x00a1
#定义 可编程性中断控制器1_ICW2		0x00a1
#定义 可编程性中断控制器1_ICW3		0x00a1
#定义 可编程性中断控制器1_ICW4		0x00a1

/* 键盘.乙 */
空 整型句柄r21(整型 *esp);
空 等待_键盘控制电路_发送就绪(空);
空 初始化_键盘(结构 先进先出32 *先进先出, 整型 数据0);
#定义 端口_KEYDAT		0x0060
#定义 端口_KEYCMD		0x0064

/* 鼠标.乙 */
结构 鼠标_解 {
	无符号 字符 缓存[3], 阶段;
	整型 x, y, 按钮;
};
空 启用_鼠标(结构 先进先出32 *先进先出, 整型 数据0, 结构 鼠标_解 *鼠解码);
整型 鼠标_解码(结构 鼠标_解 *鼠解码, 无符号 字符 dat);

/* 内存ory.乙 */
#定义 内存管理_空余S 	4090 		/* 大约是32kb */
#定义 内存管理_地址		0x003c0000	/* 内存管理地址 */
结构 空余信息 { /* 可用信息 */
	无符号 整型 添加r, 大小;
};
结构 内存管理 {	/* 内存管理 */
	整型 空余s, m加基空余s, 失败大小, 失败次数;
	结构 空余信息 空余[内存管理_空余S];
};
无符号 整型 内存检测(无符号 整型 开始, 无符号 整型 结束);
空 内存管理_初始化(结构 内存管理 *内管);
无符号 整型 内存管理_总计(结构 内存管理 *内管);
无符号 整型 内存管理_分配(结构 内存管理 *内管, 无符号 整型 大小);
整型 内存管理_空余(结构 内存管理 *内管, 无符号 整型 添加r, 无符号 整型 大小);
无符号 整型 内存管理_分配_4096(结构 内存管理 *内管, 无符号 整型 大小);
整型 内存管理_空余_4096(结构 内存管理 *内管, 无符号 整型 添加r, 无符号 整型 大小);

/* 图层.乙 */
#定义 M加基_图层S 256
结构 图层 {
	无符号 字符 *缓存, *窗体名称;
	整型 b横坐标大小, b纵坐标大小, vx0, vy0, col_输入v, 高, 旗帜, m输入_id;
	结构 层管管理 *ctl;
	结构 任务 *任务;
};
结构 层管管理 {
	无符号 字符 *显存, *地图;
	整型 横坐标大小, 纵坐标大小, 顶;
	结构 图层 *图层s[M加基_图层S];
	结构 图层 图层s0[M加基_图层S];
};
结构 层管管理 *层管_初始化(结构 内存管理 *内存管理, 无符号 字符 *显存, 整型 横坐标大小, 整型 纵坐标大小);
结构 图层 *图层_分配(结构 层管管理 *ctl);
空 图层_设置缓存(结构 图层 *层, 无符号 字符 *缓存, 整型 sx, 整型 sy, 整型 背景颜色);
空 图层_up做wn(结构 图层 *层, 整型 高);
空 图层_刷新(结构 图层 *层, 整型 bx0, 整型 by0, 整型 bx1, 整型 by1);
空 图层_slide(结构 图层 *层, 整型 vx0, 整型 vy0);
空 图层_空余(结构 图层 *层);

/* 定时器.乙 */
#定义 M加基_定时器	500
结构 定时器 {
	结构 定时器 *下一个;
	无符号 整型 超时;
	字符 旗帜, 旗帜2;
	结构 先进先出32 *先进先出;
	整型 数据;
};
结构 定时器CTL {
	无符号 整型 计数, 下一个;
	结构 定时器 *t0;
	结构 定时器 *定时器s0;
};
外部 结构 定时器CTL 定时器ctl;
空 初始化_pit(空);
空 初始化_定时器ctl(空);
结构 定时器 *定时器_分配(空);
空 定时器_空余(结构 定时器 *定时器);
空 定时器_初始化(结构 定时器 *定时器, 结构 先进先出32 *先进先出, 整型 数据);
空 定时器_设置时间(结构 定时器 *定时器, 无符号 整型 超时);
整型 定时器_取消(结构 定时器 *定时器);
空 定时器_取消所有(结构 先进先出32 *先进先出);
空 整型句柄r20(整型 *esp);

/* m任务.乙 */
#定义 M加基_任务S		1000		/* 最大任务数量 */
#定义 M加基_任务S_LV	100			/* 每1Lv的任务数量 */
#定义 M加基_任务级别S	10			/* 级别数 */
#定义 任务_GDT0		3			/* 定义从GDT的几号开始分配给TSS */
结构 TSS32 {
	整型 backl输入k, esp0, ss0, esp1, ss1, esp2, ss2, cr3;
	整型 eip, e旗帜, e加基, ecx, edx, ebx, esp, ebp, esi, edi;
	整型 es, cs, ss, ds, fs, gs;
	整型 ldtr, io地图;
};
结构 任务 {
	整型 sel, 旗帜;	/* sel用来存放GDT的编号 */
	整型 级别, 优先;
	结构 先进先出32 先进先出;
	结构 TSS32 tss;
	结构 SEGMENT_DESCRIPTOR ldt[2];
	结构 控制台 *控制台;
	整型 ds_基础, 控制台_堆;
	结构 文件句柄 *f句柄;
	整型 *文件分配表;
	字符 *命令行;
	无符号 字符 语言模式0, 语言模式, 语言字节;
	字符 *标题栏;
};
结构 任务级别 {
	整型 运行n输入g;	 /* 正在运行的任务数量 */
	整型 当前;		/* 这个变量用来记录当前正在运行的是哪个任务 */
	结构 任务 *任务s[M加基_任务S_LV];
};
结构 任务CTL {
	整型 当前_lv;		/* 现在活动中的级别 */
	字符 lv_改变;	/* 在下次任务切换时是否需要改变级别 */
	结构 任务级别 级别[M加基_任务级别S];
	结构 任务 任务s0[M加基_任务S];
};
外部 结构 任务CTL *任务ctl;
外部 结构 定时器 *任务_定时器;
结构 任务 *任务_当前(空);
结构 任务 *任务_初始化(结构 内存管理 *内存管理);
结构 任务 *任务_分配(空);
空 任务_运行(结构 任务 *任务, 整型 级别, 整型 优先);
空 任务_切换(空);
空 任务_睡眠(结构 任务 *任务);

/* 窗体.乙 */
结构 气泡 {
	结构 图层 *层;
	整型 px, py, s模式, sx, sy;
};
空 制作_窗体(无符号 整型 *缓存, 整型 横坐标大小, 整型 纵坐标大小, 字符 *标题, 整型 图标n, 字符 act);
空 制作_窗口标题(无符号 整型 *缓存, 整型 横坐标大小, 字符 *标题, 整型 图标n, 字符 act);
空 制作_文本框(结构 图层 *层, 整型 x0, 整型 y0, 整型 sx, 整型 sy, 整型 c);
空 打印字体_美互标码_层(结构 图层 *层, 整型 x, 整型 y, 整型 c, 整型 b, 字符 *s, 整型 l);
空 改变_窗口标题(结构 图层 *层, 整型 act);
结构 气泡 *制作_泡(结构 内存管理 *内存管理, 结构 图层 *层,
								整型 px, 整型 py, 整型 s模式, 整型 sx, 整型 sy);
空 放入迷你字体_美互标码_层(结构 图层 *层, 整型 x, 整型 y, 整型 c, 整型 b, 字符 *s, 整型 l);
空 制作_奥米(结构 图层 *层, 整型 px, 整型 py);

/* 控制台.乙 */
结构 控制台 {
	结构 图层 *层;
	整型 curx, cury, 光标;
	结构 定时器 *定时器;
};
结构 文件句柄 {
	字符 *缓存;
	整型 大小;
	整型 pos;
};
空 控制台_任务(结构 图层 *图层, 整型 内存总计);
空 控制台_放入字符(结构 控制台 *控制台, 整型 chr, 字符 传送e);
空 控制台_打印字符0(结构 控制台 *控制台, 字符 *s);
空 控制台_打印字符1(结构 控制台 *控制台, 字符 *s, 整型 l);
空 控制台_新行(结构 控制台 *控制台);
空 控制台_recent(结构 控制台 *控制台, 字符 *命令行, 整型 n);
空 控制台_运行cmd(字符 *命令行, 结构 控制台 *控制台, 整型 *文件分配表, 整型 内存总计);
空 cmd_内存(结构 控制台 *控制台, 整型 内存总计);
空 cmd_cls(结构 控制台 *控制台);
空 cmd_dir(结构 控制台 *控制台, 字符 *命令行, 整型 *文件分配表);
空 cmd_exit(结构 控制台 *控制台, 整型 *文件分配表);
空 cmd_开始(结构 控制台 *控制台, 字符 *命令行, 整型 内存总计);
空 cmd_ncst(结构 控制台 *控制台, 字符 *命令行, 整型 内存总计);
空 cmd_语言模式(结构 控制台 *控制台, 字符 *命令行);
空 cmd_reboot(结构 控制台 *控制台);
空 cmd_ver(结构 控制台 *控制台);
空 cmd_history(结构 控制台 *控制台, 字符 *命令行);
空 cmd_壁纸paper(结构 控制台 *控制台, 字符 *命令行, 整型 *文件分配表);
空 cmd_时间(结构 控制台 *控制台);
空 cmd_jp字体(结构 控制台 *控制台, 字符 *命令行, 整型 *文件分配表);
整型 cmd_应用(结构 控制台 *控制台, 整型 *文件分配表, 字符 *命令行);
整型 *整型句柄r0c(整型 *esp);
整型 *整型句柄r0d(整型 *esp);

/* 文件.乙 */
结构 文件信息 {
	无符号 字符 名称[8], ext[3], 类型;
	字符 保留[10];
	无符号 短整型 时间, 日期, clustno;
	无符号 整型 大小;
};
空 文件_读取文件(整型 *文件分配表, 无符号 字符 *img);
空 文件_加载文件(整型 clustno, 整型 大小, 字符 *缓存, 整型 *文件分配表, 字符 *img);
字符 *文件_加载文件2(整型 clustno, 整型 *p大小, 整型 *文件分配表);
结构 文件信息 *文件_搜索(字符 *名称, 结构 文件信息 *文信, 整型 m加基);

/* 压缩.乙 */
整型 压缩_获取大小(无符号 字符 *p);
整型 压缩_decomp(无符号 字符 *p, 字符 *q, 整型 大小);

/* 主程序.乙 */
#定义 M加基_M输入ID 256
#定义 控制台_大小X	680
#定义 控制台_大小Y	420
结构 任务 *打开_控制台任务(结构 图层 *层, 无符号 整型 内存总计);
结构 图层 *打开_控制台(结构 层管管理 *层管, 无符号 整型 内存总计);
空 键窗_关闭(结构 图层 *键_窗);
空 键窗_打开(结构 图层 *键_窗);

/* 照片.乙 */
结构 DLL_STR片ENV {	/* 64096B */
	整型 work[64 * 1024 / 4];
};
结构 红绿蓝 {
	无符号 字符 b, g, r, t;
};
结构 照片 {
	字符 *名称, *文件缓存;
	结构 红绿蓝 *片缓存;
	结构 DLL_STR片ENV *env;
	整型 f大小, 错误, 信息[8];
	/* 
		错误 list
		1: 文件 not found.
		2: 文件 is not image.
	 */
};
整型 照片_信息(结构 DLL_STR片ENV *env, 整型 *信息, 整型 大小, 字符 *fp);
整型 照片_解码0(整型 模式, 结构 DLL_STR片ENV *env, 整型 大小,
					 字符 *fp, 整型 b_类型, 字符 *缓存, 整型 skip);
无符号 字符 红绿蓝2pal(整型 r, 整型 g, 整型 b, 整型 x, 整型 y);
结构 照片 *照片_初始化(字符 *名称, 整型 *文件分配表);
整型 照片_绘画(结构 图层 *层, 结构 照片 *片, 整型 px, 整型 py);
空 照片_空余(结构 照片 *片);

/* bmp.n甲语言 */
整型 信息_BMP(结构 DLL_STR片ENV *env, 整型 *信息, 整型 大小, 字符 *fp);
整型 解码0_BMP(结构 DLL_STR片ENV *env, 整型 大小, 字符 *fp, 整型 b_类型, 字符 *缓存, 整型 skip);

/* 联像组.乙 */
整型 信息_联像组(结构 DLL_STR片ENV *env, 整型 *信息, 整型 大小, 字符 *fp);
整型 解码0_联像组(结构 DLL_STR片ENV *env, 整型 大小, 字符 *fp, 整型 b_类型, 字符 *缓存, 整型 skip);

/* 图标.乙 */
整型 信息_图标(结构 DLL_STR片ENV *env, 整型 *信息, 整型 大小, 字符 *fp);
整型 解码0_图标(结构 DLL_STR片ENV *env, 整型 大小, 字符 *fp, 整型 b_类型, 字符 *缓存, 整型 skip);

/* api.乙 */
整型 *火龙_应用程序接口(整型 edi, 整型 esi, 整型 ebp, 整型 esp, 整型 ebx, 整型 edx, 整型 ecx, 整型 e加基);
空 火龙_应用程序接口_l输入ew输入(结构 图层 *层, 整型 x0, 整型 y0, 整型 x1, 整型 y1, 整型 col);
结构 系统_信息 {
	无符号 字符 cyls;     /* 引导扇区读取磁盘的距离 */
	无符号 字符 指示灯状态;     /* 启动时键盘LED状态 */
	无符号 字符 颜色位数;     /* 视频模式多少位颜色 */
	无符号 字符 保留;  /* 预订 */
	无符号 短整型 屏幕横坐标; /* 屏幕分辨率 */
	无符号 短整型 屏幕纵坐标; /* 屏幕分辨率 */
	无符号 字符 *显存;    /* 显示的地址 */
	无符号 短整型 操作系统_类型;  /* 操作系统类型 */
};
结构 时间_信息 {
	整型 年, 月, 日, 时, 分, 秒;
};
结构 鼠标_信息 {
	整型 x, y;
};

/* 实时时钟.乙 */
整型 实时时钟_获取(整型 类型);
