/* 作者 : 邵世雄 */
#引入 "主程序.头"
#引入 <setjmp.头>
#引入 <string.头>
#定义 NULL		0

定类型 无符号 字符 无符字符;
定类型 无符号 整型 无符整型32;
定类型 无符整型32 tek_TPRB;

静态 整型 tek_解码1(整型 siz, 无符字符 *p, 无符字符 *q);
静态 整型 tek_解码2(整型 siz, 无符字符 *p, 无符字符 *q);
静态 整型 tek_解码5(整型 siz, 无符字符 *p, 无符字符 *q);

静态 无符号 整型 tek_获取num_s7s(无符字符 **pp)
/* 这总是大端的 */
/* 没有堵塞，所以很容易被篡改 */
{
	无符号 整型 s = 0;
	无符字符 *p = *pp;
	做 
	{
		s = s << 7 | *p++;
	} 
	当 ((s & 1) == 0);
	s >>= 1;
	*pp = p;
	返回 s;
}

整型 tek_获取大小(无符号 字符 *p)
{
	静态 字符 头部[15] = {
		0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x41, 0x53, 0x4b, 0x43, 0x4d, 0x50
	};
	整型 大小 = -1;
	若 (memcmp(p + 1, 头部, 15) == 0 && (*p == 0x83 || *p == 0x85 || *p == 0x89)) 
	{
		p += 16;
		大小 = tek_获取num_s7s(&p);
	}
	返回 大小;
}

整型 tek_decomp(无符号 字符 *p, 字符 *q, 整型 大小)
{
	整型 错 = -1;
	若 (*p == 0x83) 
	{
		错 = tek_解码1(大小, p, q);
	} 
	则 若 (*p == 0x85) 
	{
		错 = tek_解码2(大小, p, q);
	} 
	则 若 (*p == 0x89) 
	{
		错 = tek_解码5(大小, p, q);
	}
	若 (错 != 0) 
	{
		返回 -1;	/* 失败 */
	}
	返回 0;	/* 成功 */
}

静态 整型 tek_lzrestore_stk1(整型 srcsiz, 无符字符 *src, 整型 outsiz, 无符字符 *q)
{
	整型 by, lz, cp, ds;
	无符字符 *q1 = q + outsiz, *s7ptr = src, *q0 = q;
	做 {
		若 ((by = (lz = *s7ptr++) & 0x0f) == 0)
			by = tek_获取num_s7s(&s7ptr);
		若 ((lz >>= 4) == 0)
			lz = tek_获取num_s7s(&s7ptr);
		做 {
			*q++ = *s7ptr++;
		} 
		当 (--by);
		若 (q >= q1)
			终止;
		做 
		{
			ds = (cp = *s7ptr++) & 0x0f;
			若 ((ds & 1) == 0) 
			{
				做 
				{
					ds = ds << 7 | *s7ptr++;
				} 
				当 ((ds & 1) == 0);
			}
			ds = ~(ds >> 1);
			若 ((cp >>= 4) == 0) 
			{
				做 
				{
					cp = cp << 7 | *s7ptr++;
				} 
				当 ((cp & 1) == 0);
				cp >>= 1;
			}  /* 依靠0不来 */
			cp++;
			若 (q + ds < q0)
				转到 错;
			若 (q + cp > q1)
				cp = q1 - q;
			做 
			{
				*q = *(q + ds);
				q++;
			} 
			当 (--cp);
		} 
		当 (--lz);
	} 
	当 (q < q1);
	返回 0;
错:
	返回 1;
}

静态 整型 tek_解码1(整型 siz, 无符字符 *p, 无符字符 *q)
{
	整型 dsiz, hed, bsiz;
	无符字符 *p1 = p + siz;
	p += 16;
	若 ((dsiz = tek_获取num_s7s(&p)) > 0) 
	{
		hed = tek_获取num_s7s(&p);
		bsiz = 1 << (((hed >> 1) & 0x0f) + 8);
		若 (dsiz > bsiz || (hed & 0x21) != 0x01)
			返回 1;
		若 (hed & 0x40)
			tek_获取num_s7s(&p); /* 跳过指向选项信息的指针 */
		若 (tek_获取num_s7s(&p) != 0)
			返回 1;  /* 使用辅助buf区 */
		返回 tek_lzrestore_stk1(p1 - p, p, dsiz, q);
	}
	返回 0;
}

静态 无符号 整型 tek_获取num_s7(无符字符 **pp)
/* 这总是大端的 */
{
	无符号 整型 s = 0, b = 0, a = 1;
	无符字符 *p = *pp;
	循环 (;;) 
	{
		s = s << 7 | *p++;
		若 (s & 1)
			终止;
		a <<= 7;
		b += a;
	}
	s >>= 1;
	*pp = p;
	返回 s + b;
}

静态 整型 tek_lzrestore_stk2(整型 srcsiz, 无符字符 *src, 整型 outsiz, 无符字符 *q)
{
	整型 cp, ds, repdis[4], i, j;
	无符字符 *q1 = q + outsiz, *s7ptr = src, *q0 = q, bylz, cbylz;
	循环 (j = 0; j < 4; j++)
		repdis[j] = -1 - j;
	bylz = cbylz = 0;
	若 (outsiz) 
	{
		若 (tek_获取num_s7s(&s7ptr))
			返回 1;
		做 
		{
			/* 按阶段*/
			j = 0;
			做 
			{
				j++;
				若 (j >= 17) 
				{
					j += tek_获取num_s7s(&s7ptr);
					终止;
				}
				若 (cbylz == 0) 
				{
					cbylz = 8;
					bylz = *s7ptr++;
				}
				cbylz--;
				i = bylz & 1;
				bylz >>= 1;
			} 
			当 (i == 0);
			做 
			{
				*q++ = *s7ptr++;
			} 
			当 (--j);
			若 (q >= q1)
				终止;

			/* lz阶段 */
			j = 0;
			做 
			{
				j++;
				若 (j >= 17) 
				{
					j += tek_获取num_s7s(&s7ptr);
					终止;
				}
				若 (cbylz == 0) 
				{
					cbylz = 8;
					bylz = *s7ptr++;
				}
				cbylz--;
				i = bylz & 1;
				bylz >>= 1;
			} 
			当 (i == 0);
			做 {
				i = *s7ptr++;
				cp = i >> 4;
				i &= 0x0f;
				若 ((i & 1) == 0)
					i |= (tek_获取num_s7(&s7ptr) + 1) << 4;
				i >>= 1;
				ds = ~(i - 6);
				若 (i < 4)
					ds = repdis[i];
				若 (i == 4)
					ds = repdis[0] - tek_获取num_s7(&s7ptr) - 1;
				若 (i == 5)
					ds = repdis[0] + tek_获取num_s7(&s7ptr) + 1;
				若 (cp == 0)
					cp = tek_获取num_s7(&s7ptr) + 16;
				cp++;
				若 (i > 0) 
				{
					若 (i > 1) {
						若 (i > 2)
							repdis[3] = repdis[2];
						repdis[2] = repdis[1];
					}
					repdis[1] = repdis[0];
					repdis[0] = ds;
				}
				若 (q + ds < q0)
					转到 错;
				若 (q + cp > q1)
					cp = q1 - q;
				做 
				{
					*q = *(q + ds);
					q++;
				} 
				当 (--cp);
			} 
			当 (--j);
		} 
		当 (q < q1);
	}
	返回 0;
错:
	返回 1;
}

静态 整型 tek_解码2(整型 siz, 无符字符 *p, 无符字符 *q)
{
	无符字符 *p1 = p + siz;
	整型 dsiz, hed, bsiz, st = 0;
	p += 16;
	若 ((dsiz = tek_获取num_s7s(&p)) > 0) 
	{
		hed = tek_获取num_s7s(&p);
		bsiz = 1 << (((hed >> 1) & 0x0f) + 8);
		若 (dsiz > bsiz || (hed & 0x21) != 0x01)
			返回 1;
		若 (hed & 0x40)
			tek_获取num_s7s(&p); /* 跳过指向选项信息的指针 */
		st = tek_lzrestore_stk2(p1 - p, p, dsiz, q);
	}
	返回 st;
}

静态 整型 tek_decmain5(整型 *work, 无符字符 *src, 整型 osiz, 无符字符 *q, 整型 lc, 整型 pb, 整型 lp, 整型 标记);

静态 整型 tek_lzrestore_tek5(整型 srcsiz, 无符字符 *src, 整型 outsiz, 无符字符 *outbuf)
{
	整型 wrksiz, lc, lp, pb, 标记, *work, prop0, fl;

	若 ((fl = (prop0 = *src) & 0x0f) == 0x01) /* 0001 */
		标记 |= -1;
	则 若 (fl == 0x05)
		标记 = -2;
	则 若 (fl == 0x09)
		标记 &= 0;
	则
		返回 1;
	src++;
	prop0 >>= 4;
	若 (prop0 == 0)
		prop0 = *src++;
	则 
	{
		静态 无符字符 prop0_表[] = { 0x5d, 0x00 }, prop1_表[] = { 0x00 };
		若 (标记 == -1) 
		{
			若 (prop0 >= 3)
				返回 1;
			prop0 = prop0_表[prop0 - 1];
		} 
		则 
		{
			若 (prop0 >= 2)
				返回 1;
			prop0 = prop1_表[prop0 - 1];
		}
	}
	lp = prop0 / (9 * 5);
	prop0 %= 9 * 5;
	pb = prop0 / 9;
	lc = prop0 % 9;
	若 (标记 == 0) /* tek5:z2 */
		标记 = *src++;
	若 (标记 == -1) 
	{ /* stk5 */
		wrksiz = lp;
		lp = pb;
		pb = wrksiz;
	}
	wrksiz = 0x180 * 占字数 (无符整型32) + (0x840 + (0x300 << (lc + lp))) * 占字数 (tek_TPRB); /* 最低15KB, lc+lp=3若、36KB */
	work = (整型 *) 内管_分配_4k((结构 内存管理 *) 内存管理_地址, wrksiz);
	若 (work == NULL)
		返回 -1;
	标记 = tek_decmain5(work, src, outsiz, outbuf, lc, pb, lp, 标记);
	内管_可用_4k((结构 内存管理 *) 内存管理_地址, (整型) work, wrksiz);
	返回 标记;
}

结构 tek_STR_BITMODEL {
	无符字符 t, m, s, dmy;
	无符整型32 prb0, prb1, tmsk, ntm, lt, lt0, dmy4;
};

结构 tek_STR_PRB {
	结构 tek_STR_PRB_PB {
		结构 tek_STR_PRB_PBST {
			tek_TPRB mch, rep0l1;
		} st[12];
		tek_TPRB len低[2][8], len中[2][8];
	} pb[16];
	结构 tek_STR_PRB_ST {
		tek_TPRB rep, repg0, repg1, repg2;
	} st[12];
	tek_TPRB lensel[2][2], len高[2][256], pslot[4][64], algn[64];
	tek_TPRB spdis[2][2+4+8+16+32], le下一个[2+4+8+16+32];
	tek_TPRB repg3, fchgprm[2 * 32], tbmt[16], tbmm[16], fchglt;
	tek_TPRB lit[1];
};

结构 tek_STR_RNGDEC {
	无符字符 *p;
	无符整型32 range, code, rmsk;
	jmp_buf errjmp;
	结构 tek_STR_BITMODEL bm[32], *ptbm[16];
	结构 tek_STR_PRB probs;
};

静态 空 tek_设置bm5(结构 tek_STR_BITMODEL *bm, 整型 t, 整型 m)
{
	bm->t = t;
	bm->m = m;
	bm->prb1 = -1 << (m + t);
	bm->prb0 = ~bm->prb1;
	bm->prb1 |= 1 << t;
	bm->tmsk = (-1 << t) & 0xffff;
	bm->prb0 &= bm->tmsk;
	bm->prb1 &= bm->tmsk;
	bm->ntm = ~bm->tmsk;
	返回;
}

静态 整型 tek_rd获取0(结构 tek_STR_RNGDEC *rd, 整型 n, 整型 i)
{
	做 
	{
		当 (rd->range < (无符整型32) (1 << 24)) 
		{
			rd->range <<= 8;
			rd->code = rd->code << 8 | *rd->p++;
		}
		rd->range >>= 1;
		i += i;
		若 (rd->code >= rd->range) 
		{
			rd->code -= rd->range;
			i |= 1;
		}
	} 当 (--n);
	返回 ~i;
}

静态 整型 tek_rd获取1(结构 tek_STR_RNGDEC *rd, tek_TPRB *prob0, 整型 n, 整型 j, 结构 tek_STR_BITMODEL *bm)
{
	无符整型32 p, i, *prob, nm = n >> 4;
	n &= 0x0f;
	prob0 -= j;
	做 
	{
		p = *(prob = prob0 + j);
		若 (bm->lt > 0) 
		{
			若 (--bm->lt == 0) 
			{
				/* 寿命已到 */
				若 (tek_rd获取1(rd, &rd->probs.fchglt, 0x71, 0, &rd->bm[3]) == 0) {
					/* 未支持更改寿命 */
错:
					长整型jmp(rd->errjmp, 1);
				}
				i = bm - rd->bm;
				若 ((bm->s = tek_rd获取1(rd, &rd->probs.fchgprm[i * 2 + bm->s], 0x71, 0, &rd->bm[1])) == 0) {
					i = tek_rd获取1(rd, rd->probs.tbmt, 0x74, 1, &rd->bm[2]) & 15;
					若 (i == 15)
						转到 错;
					tek_设置bm5(bm, i, ((tek_rd获取1(rd, rd->probs.tbmm, 0x74, 1, &rd->bm[2]) - 1) & 15) + 1);
				}
				bm->lt = bm->lt0;
			}
			若 (p < bm->prb0) 
			{
				p = bm->prb0;
				转到 fixprob;
			}
			若 (p > bm->prb1) 
			{
				p = bm->prb1;
				转到 fixprob;
			}
			若 (p & bm->ntm) 
			{
				p &= bm->tmsk;
	fixprob:
				*prob = p;
			}
		}

		当 (rd->range < (无符整型32) (1 << 24)) 
		{
			rd->range <<= 8;
			rd->code = rd->code << 8 | *rd->p++;
		}
		j += j;
		i = ((无符号 长整型 长整型) (rd->range & rd->rmsk) * p) >> 16;
		若 (rd->code < i) 
		{
			j |= 1;
			rd->range = i;
			*prob += ((0x10000 - p) >> bm->m) & bm->tmsk;
		} 
		则 
		{
			rd->range -= i;
			rd->code -= i;
			*prob -= (p >> bm->m) & bm->tmsk;
		}
		--n;
		若 ((n & nm) == 0)
			bm++;
	} 当 (n);
	返回 j;
}

静态 无符整型32 tek_revbit(无符整型32 数据, 整型 长)
{
	无符整型32 rev = 0;
	做 
	{
		rev += rev + (数据 & 1);
		数据 >>= 1;
	} 
	当 (--长);
	返回 rev;
}

静态 整型 tek_获取len5(结构 tek_STR_RNGDEC *rd, 整型 m, 整型 s_pos, 整型 stk)
{
	整型 i;
	若 (tek_rd获取1(rd, &rd->probs.lensel[m][0], 0x71, 0, rd->ptbm[3]) ^ stk) /* 低 */
		i = tek_rd获取1(rd, rd->probs.pb[s_pos].len低[m], 0x73, 1, rd->ptbm[4]) & 7;
	则 若 (tek_rd获取1(rd, &rd->probs.lensel[m][1], 0x71, 0, rd->ptbm[3]) ^ stk) /* 中 */
		i = tek_rd获取1(rd, rd->probs.pb[s_pos].len中[m], 0x73, 1, rd->ptbm[5]);
	则 
	{
		/* 高 */
		i = tek_rd获取1(rd, rd->probs.len高[m], 0x78, 1, rd->ptbm[6]) - (256 + 256 - 8);
		若 (i > 0) 
		{
			若 (i < 6 && stk == 0)
				i = tek_rd获取1(rd, &rd->probs.le下一个[(1 << i) - 2], i | 0x70, 1, rd->ptbm[7]) - 1;
			则
				i = tek_rd获取0(rd, i, ~1) - 1;
			i = tek_rd获取0(rd, i, ~1) - 1;
		}
		i += 256 - 8 + 16;
	}
	返回 i;
}

静态 整型 tek_decmain5(整型 *work, 无符字符 *src, 整型 osiz, 无符字符 *q, 整型 lc, 整型 pb, 整型 lp, 整型 标记)
{
	静态 整型 state_表[] = { 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 4, 5 };
	整型 i, j, k, pmch, rep[4], s, pos, m_pos = (1 << pb) - 1, m_lp = (1 << lp) - 1;
	整型 stk = (标记 == -1), lcr = 8 - lc, s_pos, lit0cntmsk = 0x78;
	无符整型32 *lit1;
	结构 tek_STR_RNGDEC *rd = (结构 tek_STR_RNGDEC *) work;
	结构 tek_STR_PRB *prb = &rd->probs;

	rd->p = &src[4];
	rd->range |= -1;
	rd->code = src[0] << 24 | src[1] << 16 | src[2] << 8 | src[3];
	循环 (i = 0; i < 4; i++)
		rep[i] = ~i;
	若 (setjmp(rd->errjmp))
		转到 错;
	循环 (i = 占字数 (结构 tek_STR_PRB) / 占字数 (tek_TPRB) + (0x300 << (lc + lp)) - 2; i >= 0; i--)
		((tek_TPRB *) prb)[i] = 1 << 15;
	循环 (i = 0; i < 32; i++) 
	{
		rd->bm[i].lt = (i >= 4); /* 0..3没有寿命 */
		rd->bm[i].lt0 = (i < 24) ? 16 * 1024 : 8 * 1024;
		rd->bm[i].s &= 0;
		rd->bm[i].t = rd->bm[i].m = 5;
	}
	lit1 = prb->lit + ((256 << (lc + lp)) - 2);
	若 (stk) 
	{
		rd->rmsk = -1 << 11;
		循环 (i = 0; i < 32; i++)
			rd->bm[i].lt = 0; /* 全部没有寿命 */
		循环 (i = 0; i < 14; i++)
			rd->ptbm[i] = &rd->bm[0];
	} 
	则 
	{
		无符字符 pt[14];
		静态 无符字符 pt1[14] = {
			 8,  8,  8,  8,  8,  8,  8,  8,
			 8,  8, 18, 18, 18,  8
		};
		静态 无符字符 pt2[14] = {
			 8,  8, 10, 11, 12, 12, 14, 15,
			16, 16, 18, 18, 20, 21
		};
		/*
			 0- 7:mch, mch, lit1, lensel, len低, len中, len高, le下一个
			 8-15:pslot, pslot, sdis, sdis, align, rep-repg2
		*/
		rd->rmsk |= -1;
		rd->bm[1].t = 5; rd->bm[1].m = 3; /* 循环 fchgprm */
		rd->bm[2].t = 9; rd->bm[2].m = 2; /* 循环 tbmt, tbmm */
		若 (标记 & 0x40) 
		{ /* lt-标记 */
			rd->bm[3].t = 0; rd->bm[3].m = 1;
			prb->fchglt = 0xffff;
		}
		rd->bm[22].t = 0; rd->bm[22].m = 1;
		prb->repg3 = 0xffff;
		若 (标记 == -2) 
		{ /* z1 */
			rd->bm[22].lt = 0; /* 把lepg3的lt改为0 */
			循环 (i = 0; i < 14; i++)
				pt[i] = pt1[i];
		} 
		则 
		{
			循环 (i = 0; i < 14; i++)
				pt[i] = pt2[i];
			lit0cntmsk = (7 >> (标记 & 3)) << 4 | 8;
			pt[ 1] =  8 + ((标记 & 0x04) != 0); /* mch */
			pt[ 5] = 12 + ((标记 & 0x08) != 0); /* llm */
			pt[ 9] = 16 + ((标记 & 0x10) != 0); /* pst */
			pt[11] = 18 + ((标记 & 0x20) != 0); /* sds */
		}
		循环 (i = 0; i < 14; i++)
			rd->ptbm[i] = &rd->bm[pt[i]];
	}
	循环 (i = 0; i < 32; i++)
		tek_设置bm5(&rd->bm[i], rd->bm[i].t, rd->bm[i].m);

	若 ((tek_rd获取1(rd, &prb->pb[0].st[0].mch, 0x71, 0, rd->ptbm[0]) ^ stk) == 0)
		转到 错;
	*q++ = tek_rd获取1(rd, prb->lit, lit0cntmsk, 1, &rd->bm[24]) & 0xff;
	pmch &= 0; s &= 0; pos = 1;
	当 (pos < osiz) 
	{
		s_pos = pos & m_pos;
		若 (tek_rd获取1(rd, &prb->pb[s_pos].st[s].mch, 0x71, 0, rd->ptbm[s > 0]) ^ stk) 
		{ /* 非lz */
			i = (q[-1] >> lcr | (pos & m_lp) << lc) << 8;
			s = state_表[s];
			若 (pmch == 0)
				*q = tek_rd获取1(rd, &prb->lit[i], lit0cntmsk, 1, &rd->bm[24]) & 0xff;
			则 
			{
				结构 tek_STR_BITMODEL *bm = &rd->bm[24];
				j = 1; /* lit1从最初就减少了2 */
				k = 8;
				pmch = q[rep[0]];
				做 
				{
					j += j + tek_rd获取1(rd, &lit1[(i + j) << 1 | pmch >> 7], 0x71, 0, rd->ptbm[2]);
					k--;
					若 ((k & (lit0cntmsk >> 4)) == 0)
						bm++;
					若 ((((pmch >> 7) ^ j) & 1) != 0 && k != 0) 
					{
						j = tek_rd获取1(rd, &prb->lit[i + j - 1], k | (lit0cntmsk & 0x70), j, bm);
						终止;
					}
					pmch <<= 1;
				} 
				当 (k);
				*q = j & 0xff;
				pmch &= 0;
			}
			pos++;
			q++;
		} 
		则 
		{ /* lz */
			pmch |= 1;
			若 (tek_rd获取1(rd, &prb->st[s].rep, 0x71, 0, rd->ptbm[13]) ^ stk) 
			{ /* 长/dis */
				rep[3] = rep[2];
				rep[2] = rep[1];
				rep[1] = rep[0];
				j = i = tek_获取len5(rd, 0, s_pos, stk);
				s = s < 7 ? 7 : 10;
				若 (j >= 4)
					j = 3;
				rep[0] = j = tek_rd获取1(rd, prb->pslot[j], 0x76, 1, rd->ptbm[8 + (j == 3)]) & 0x3f;
				若 (j >= 4) 
				{
					k = (j >> 1) - 1; /* k = [1, 30] */
					rep[0] = (2 | (j & 1)) << k;
					若 (j < 14) /* k < 6 */
						rep[0] |= tek_revbit(tek_rd获取1(rd, &prb->spdis[j & 1][(1 << k) - 2], k | 0x70, 1, rd->ptbm[10 + (k >= 4)]), k);
					则 
					{
						若 (stk == 0) 
						{
							若 (k -= 6)
								rep[0] |= tek_rd获取0(rd, k, ~0) << 6;
							rep[0] |= tek_revbit(tek_rd获取1(rd, prb->algn, 0x76, 1, rd->ptbm[12]), 6);
						} 
						则 
						{
							rep[0] |= tek_rd获取0(rd, k - 4, ~0) << 4;
							rep[0] |= tek_revbit(tek_rd获取1(rd, prb->algn, 0x74, 1, rd->ptbm[12]), 4);
						}
					}
				}
				rep[0] = ~rep[0];
			} 
			则 
			{ /* repeat-dis */
				若 (tek_rd获取1(rd, &prb->st[s].repg0, 0x71, 0, rd->ptbm[13]) ^ stk) 
				{ /* rep0 */
					i |= -1;
					若 (tek_rd获取1(rd, &prb->pb[s_pos].st[s].rep0l1, 0x71, 0, rd->ptbm[13]) == 0) 
					{
						s = s < 7 ? 9 : 11;
						转到 跳过;
					}
				} 
				则 
				{
					若 (tek_rd获取1(rd, &prb->st[s].repg1, 0x71, 0, rd->ptbm[13]) ^ stk) /* rep1 */
						i = rep[1];
					则 
					{
						若 (tek_rd获取1(rd, &prb->st[s].repg2, 0x71, 0, rd->ptbm[13]) ^ stk) /* rep2 */
							i = rep[2];
						则 
						{
							若 (stk == 0) 
							{
								若  (tek_rd获取1(rd, &prb->repg3, 0x71, 0, &rd->bm[22]) == 0)
									转到 错;
							}
							i = rep[3]; /* rep3 */
							rep[3] = rep[2];
						}
						rep[2] = rep[1];
					}
					rep[1] = rep[0];
					rep[0] = i;
				}
				i = tek_获取len5(rd, 1, s_pos, stk);
				s = s < 7 ? 8 : 11;
			}
跳过:
			i += 2;
			若 (pos + rep[0] < 0)
				转到 错;
			若 (pos + i > osiz)
				i = osiz - pos;
			pos += i;
			做 
			{
				*q = q[rep[0]];
				q++;
			} 
			当 (--i);
		}
	}
	返回 0;
错:
	返回 1;
}

静态 整型 tek_解码5(整型 siz, 无符字符 *p, 无符字符 *q)
{
	无符字符 *p1 = p + siz;
	整型 dsiz, hed, bsiz, st = 0;
	p += 16;
	若 ((dsiz = tek_获取num_s7s(&p)) > 0) 
	{
		hed = tek_获取num_s7s(&p);
		若 ((hed & 1) == 0)
			st = tek_lzrestore_tek5(p1 - p + 1, p - 1, dsiz, q);
		则 
		{
			bsiz = 1 << (((hed >> 1) & 0x0f) + 8);
			若 (hed & 0x20)
				返回 1;
			若 (bsiz == 256)
				st = tek_lzrestore_tek5(p1 - p, p, dsiz, q);
			则 
			{
				若 (dsiz > bsiz)
					返回 1;
				若 (hed & 0x40)
					tek_获取num_s7s(&p); /* 跳过指向选项信息的指针 */
				st = tek_lzrestore_tek5(p1 - p, p, dsiz, q);
			}
		}
	}
	返回 st;
}
